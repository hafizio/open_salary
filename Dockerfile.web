# Build time container
FROM elixir:1.11.4-alpine

ARG app_name=open_salary
ARG phoenix_subdir=.
ARG build_env=prod
ENV MIX_ENV=${build_env} TERM=xterm

RUN apk update
RUN apk upgrade --no-cache
RUN apk add nodejs=14.16.1-r1 nodejs-npm=14.16.1-r1 yarn
RUN apk add inotify-tools=3.20.11.0-r0
RUN apk add postgresql-client=13.3-r0

RUN mix local.rebar --force
RUN mix local.hex --force

RUN mkdir /app
COPY . /app
WORKDIR /app

RUN mix do deps.get, compile
RUN cd ${phoenix_subdir}/assets \
  && yarn install \
  && yarn run deploy \
  && cd .. \
  && mix phx.digest
RUN mix release ${app_name} \
  && mv _build/${build_env}/rel/${app_name} /opt/release \
  && mv /opt/release/bin/${app_name} /opt/release/bin/start_server

# Runtime container
FROM alpine:latest
RUN apk update \
  && apk --no-cache --update add bash ca-certificates openssl-dev \
  && mkdir -p /usr/local/bin

ENV PYTHONUNBUFFERED=1
RUN apk add protoc
RUN apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python
RUN python3 -m ensurepip
RUN pip3 install pip setuptools protobuf
RUN apk add py3-scikit-learn

ENV REPLACE_OS_VARS=true

# For local dev, heroku will ignore this
EXPOSE $PORT

WORKDIR /opt/app
COPY --from=0 /opt/release .
RUN addgroup -S elixir && adduser -H -D -S -G elixir elixir
RUN chown -R elixir:elixir /opt/app
USER elixir

# Heroku sets magical $PORT variable
CMD PORT=$PORT exec /opt/app/bin/start_server start